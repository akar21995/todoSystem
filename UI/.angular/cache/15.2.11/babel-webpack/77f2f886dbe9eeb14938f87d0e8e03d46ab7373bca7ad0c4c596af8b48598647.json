{"ast":null,"code":"import { map } from 'rxjs';\nimport { TaskStatusList } from '../utils/general.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_service/todo.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TodoListComponent_li_10_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\");\n  }\n}\nfunction TodoListComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"input\", 5);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_li_10_Template_input_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const todo_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(todo_r1.title = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"select\", 5);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_li_10_Template_select_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const todo_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(todo_r1.status = $event);\n    });\n    i0.ɵɵtemplate(3, TodoListComponent_li_10_option_3_Template, 1, 0, \"option\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_li_10_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const todo_r1 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateTodo(todo_r1));\n    });\n    i0.ɵɵtext(5, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_li_10_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const todo_r1 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.deleteTodo(todo_r1.id));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todo_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", todo_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", todo_r1.status);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.statusList);\n  }\n}\n// import { saveAs } from 'file-saver';\n// import * as Papa from 'papaparse';\nexport class TodoListComponent {\n  constructor(todoService) {\n    this.todoService = todoService;\n    this.newTodoTitle = '';\n    this.statusList = TaskStatusList;\n  }\n  ngOnInit() {\n    this.todos = this.todoService.getTodos().pipe(map(res => {\n      if (res) {\n        console.log(res);\n        return res.taskList;\n      }\n    }));\n  }\n  addTodo() {\n    const newTodo = {\n      id: Date.now(),\n      title: this.newTodoTitle,\n      status: 'pending'\n    };\n    this.todoService.addTodo(newTodo);\n    this.newTodoTitle = '';\n  }\n  updateTodo(todo) {\n    this.todoService.updateTodo(todo);\n  }\n  deleteTodo(id) {\n    this.todoService.deleteTodo(id);\n  }\n  uploadCSV(event) {\n    const file = event.target.files[0];\n    // Papa.parse(file, {\n    //   complete: (result) => {\n    //     const todos: Todo[] = result.data.map((item: any, index: number) => ({\n    //       id: index,\n    //       title: item[0],\n    //       status: item[1]\n    //     }));\n    //     this.todoService.setTodosFromCSV(todos);\n    //   }\n    // });\n  }\n\n  downloadCSV() {\n    // const todos = this.todoService.getTodosAsCSV();\n    // const csv = Papa.unparse(todos);\n    // const blob = new Blob([csv], { type: 'text/csv' });\n    // saveAs(blob, 'todos.csv');\n  }\n  static #_ = this.ɵfac = function TodoListComponent_Factory(t) {\n    return new (t || TodoListComponent)(i0.ɵɵdirectiveInject(i1.TodoService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoListComponent,\n    selectors: [[\"app-todo-list\"]],\n    decls: 12,\n    vars: 4,\n    consts: [[\"placeholder\", \"New Todo\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"type\", \"file\", 3, \"change\"], [2, \"padding\", \"2%\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngModel\", \"ngModelChange\"]],\n    template: function TodoListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Todo List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.newTodoTitle = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_4_listener() {\n          return ctx.addTodo();\n        });\n        i0.ɵɵtext(5, \"Add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 2);\n        i0.ɵɵlistener(\"change\", function TodoListComponent_Template_input_change_6_listener($event) {\n          return ctx.uploadCSV($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_7_listener() {\n          return ctx.downloadCSV();\n        });\n        i0.ɵɵtext(8, \"Download CSV\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ul\", 3);\n        i0.ɵɵtemplate(10, TodoListComponent_li_10_Template, 8, 3, \"li\", 4);\n        i0.ɵɵpipe(11, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.newTodoTitle);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(11, 2, ctx.todos));\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel, i2.AsyncPipe],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"AAGA,SAAqBA,GAAG,QAAc,MAAM;AAC5C,SAAqBC,cAAc,QAAQ,yBAAyB;;;;;;;ICU5DC,yBAAmD;;;;;;IALvDA,0BAAuC;IAC9BA;MAAA;MAAA;MAAA,OAAaA,sCACtB;IAAA,EADiC;IAA/BA,iBAAgC;IAChCA,iCAAkC;IAA1BA;MAAA;MAAA;MAAA,OAAaA,uCACvB;IAAA,EADmC;IAG/BA,8EAAmD;IACrDA,iBAAS;IACTA,iCAAmC;IAA3BA;MAAA;MAAA;MAAA;MAAA,OAASA,yCAAgB;IAAA,EAAC;IAACA,sBAAM;IAAAA,iBAAS;IAClDA,iCAAsC;IAA9BA;MAAA;MAAA;MAAA;MAAA,OAASA,4CAAmB;IAAA,EAAC;IAACA,sBAAM;IAAAA,iBAAS;;;;;IAP9CA,eAAwB;IAAxBA,uCAAwB;IACvBA,eAAyB;IAAzBA,wCAAyB;IAGJA,eAAa;IAAbA,2CAAa;;;ADThD;AACA;AAMA,OAAM,MAAOC,iBAAiB;EAM5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAJ/B,iBAAY,GAAG,EAAE;IAEjB,eAAU,GAAaJ,cAAc;EAEU;EAE/CK,QAAQ;IACN,IAAI,CAACC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE,CAACC,IAAI,CAC3CT,GAAG,CAAEU,GAAQ,IAAI;MACf,IAAGA,GAAG,EAAE;QACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,OAAOA,GAAG,CAACG,QAAQ;;IAEvB,CAAC,CAAC,CACH;EACH;EAEAC,OAAO;IACL,MAAMC,OAAO,GAAS;MACpBC,EAAE,EAAEC,IAAI,CAACC,GAAG,EAAE;MACdC,KAAK,EAAE,IAAI,CAACC,YAAY;MACxBC,MAAM,EAAE;KACT;IACD,IAAI,CAAChB,WAAW,CAACS,OAAO,CAACC,OAAO,CAAC;IACjC,IAAI,CAACK,YAAY,GAAG,EAAE;EACxB;EAEAE,UAAU,CAACC,IAAU;IACnB,IAAI,CAAClB,WAAW,CAACiB,UAAU,CAACC,IAAI,CAAC;EACnC;EAEAC,UAAU,CAACR,EAAU;IACnB,IAAI,CAACX,WAAW,CAACmB,UAAU,CAACR,EAAE,CAAC;EACjC;EAEAS,SAAS,CAACC,KAAU;IAClB,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEAC,WAAW;IACT;IACA;IACA;IACA;EAAA;EACD;qBAxDU3B,iBAAiB;EAAA;EAAA;UAAjBA,iBAAiB;IAAA4B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCX9BjC,2BAAK;QACCA,yBAAS;QAAAA,iBAAK;QAClBA,gCAAyD;QAAlDA;UAAA;QAAA,EAA0B;QAAjCA,iBAAyD;QACzDA,iCAA4B;QAApBA;UAAA,OAASkC,aAAS;QAAA,EAAC;QAAClC,mBAAG;QAAAA,iBAAS;QACxCA,gCAAgD;QAA7BA;UAAA,OAAUkC,qBAAiB;QAAA,EAAC;QAA/ClC,iBAAgD;QAChDA,iCAAgC;QAAxBA;UAAA,OAASkC,iBAAa;QAAA,EAAC;QAAClC,4BAAY;QAAAA,iBAAS;QAErDA,6BAAyB;QACvBA,kEASK;;QACPA,iBAAK;;;QAhBEA,eAA0B;QAA1BA,0CAA0B;QAMVA,eAAgB;QAAhBA,0DAAgB","names":["map","TaskStatusList","i0","TodoListComponent","constructor","todoService","ngOnInit","todos","getTodos","pipe","res","console","log","taskList","addTodo","newTodo","id","Date","now","title","newTodoTitle","status","updateTodo","todo","deleteTodo","uploadCSV","event","file","target","files","downloadCSV","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Test\\todo-list\\UI\\src\\app\\tasks-list\\task-list.component.ts","D:\\Test\\todo-list\\UI\\src\\app\\tasks-list\\task-list.component.html"],"sourcesContent":["// src/app/todo-list/todo-list.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { TodoService, Todo } from '../_service/todo.service';\r\nimport { Observable, map, pipe } from 'rxjs';\r\nimport { TaskStatus, TaskStatusList } from '../utils/general.config';\r\n// import { saveAs } from 'file-saver';\r\n// import * as Papa from 'papaparse';\r\n\r\n@Component({\r\n  selector: 'app-todo-list',\r\n  templateUrl: './task-list.component.html'\r\n})\r\nexport class TodoListComponent implements OnInit {\r\n  todos: Observable<Todo[]> | undefined;\r\n  newTodoTitle = '';\r\n\r\n  statusList: string[] = TaskStatusList;\r\n\r\n  constructor(private todoService: TodoService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.todos = this.todoService.getTodos().pipe(\r\n      map((res: any) => {\r\n        if(res) {\r\n          console.log(res);\r\n          return res.taskList;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  addTodo() {\r\n    const newTodo: Todo = {\r\n      id: Date.now(),\r\n      title: this.newTodoTitle,\r\n      status: 'pending'\r\n    };\r\n    this.todoService.addTodo(newTodo);\r\n    this.newTodoTitle = '';\r\n  }\r\n\r\n  updateTodo(todo: Todo) {\r\n    this.todoService.updateTodo(todo);\r\n  }\r\n\r\n  deleteTodo(id: number) {\r\n    this.todoService.deleteTodo(id);\r\n  }\r\n\r\n  uploadCSV(event: any) {\r\n    const file = event.target.files[0];\r\n    // Papa.parse(file, {\r\n    //   complete: (result) => {\r\n    //     const todos: Todo[] = result.data.map((item: any, index: number) => ({\r\n    //       id: index,\r\n    //       title: item[0],\r\n    //       status: item[1]\r\n    //     }));\r\n    //     this.todoService.setTodosFromCSV(todos);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  downloadCSV() {\r\n    // const todos = this.todoService.getTodosAsCSV();\r\n    // const csv = Papa.unparse(todos);\r\n    // const blob = new Blob([csv], { type: 'text/csv' });\r\n    // saveAs(blob, 'todos.csv');\r\n  }\r\n}\r\n","<!-- src/app/todo-list/todo-list.component.html -->\r\n<div>\r\n  <h1>Todo List</h1>\r\n  <input [(ngModel)]=\"newTodoTitle\" placeholder=\"New Todo\">\r\n  <button (click)=\"addTodo()\">Add</button>\r\n  <input type=\"file\" (change)=\"uploadCSV($event)\">\r\n  <button (click)=\"downloadCSV()\">Download CSV</button>\r\n\r\n  <ul style=\"padding: 2%;\">\r\n    <li *ngFor=\"let todo of todos | async\">\r\n      <input [(ngModel)]=\"todo.title\">\r\n      <select [(ngModel)]=\"todo.status\">\r\n        <!-- <option value=\"pending\">Pending</option>\r\n        <option value=\"completed\">Completed</option> -->\r\n        <option *ngFor=\"let status of statusList\"></option>\r\n      </select>\r\n      <button (click)=\"updateTodo(todo)\">Update</button>\r\n      <button (click)=\"deleteTodo(todo.id)\">Delete</button>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}