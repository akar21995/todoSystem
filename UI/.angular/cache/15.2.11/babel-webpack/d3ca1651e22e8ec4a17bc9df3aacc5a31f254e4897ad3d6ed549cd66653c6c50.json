{"ast":null,"code":"import { map } from 'rxjs';\nimport { TaskStatus, TaskStatusList } from '../utils/general.config';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_service/todo.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TodoListComponent_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", s_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", s_r2, \" \");\n  }\n}\nfunction TodoListComponent_li_20_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", s_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", s_r5, \" \");\n  }\n}\nfunction TodoListComponent_li_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 9)(1, \"input\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_li_20_Template_input_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(todo_r3.taskId = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_li_20_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(todo_r3.title = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_li_20_Template_select_ngModelChange_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(todo_r3.status = $event);\n    });\n    i0.ɵɵtemplate(4, TodoListComponent_li_20_option_4_Template, 2, 2, \"option\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_li_20_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r3 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.updateTodo(todo_r3));\n    });\n    i0.ɵɵtext(6, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_li_20_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r3 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.deleteTodo(todo_r3.taskId));\n    });\n    i0.ɵɵtext(8, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todo_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", todo_r3.taskId)(\"disabled\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", todo_r3.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", todo_r3.status);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.statusList);\n  }\n}\nexport class TodoListComponent {\n  constructor(todoService) {\n    this.todoService = todoService;\n    this.newTodoTitle = '';\n    this.statusList = TaskStatusList;\n    this.StatusFilter = \"\";\n  }\n  ngOnInit() {\n    this.getAllToDos();\n  }\n  getAllToDos() {\n    this.todos = this.todoService.getTodos().pipe(map(res => {\n      if (res) {\n        console.log(res);\n        return res.taskList;\n      }\n    }));\n  }\n  statusFilter(event) {\n    console.log(event.target.value);\n    this.todos = this.todoService.statusFilterTodos(event.target.value).pipe(map(res => {\n      if (res) {\n        console.log(res);\n        return res.taskList;\n      }\n    }));\n  }\n  idFilter(event) {\n    console.log(event.target.value);\n    this.todos = this.todoService.getIdFilterTodo(event.target.value).pipe(map(res => {\n      if (res) {\n        console.log(res);\n        return res;\n      }\n    }));\n  }\n  addTodo() {\n    const newTodo = {\n      title: this.newTodoTitle,\n      status: TaskStatus.pending,\n      description: \"\"\n    };\n    this.todoService.addTodo(newTodo).subscribe(res => {\n      if (res) {\n        this.newTodoTitle = '';\n        this.getAllToDos();\n      }\n    }, err => {\n      console.error(err);\n    });\n  }\n  updateTodo(todo) {\n    this.todoService.updateTodo(todo.taskId, todo).subscribe(res => {\n      if (res) {\n        this.getAllToDos();\n      }\n    }, err => {\n      console.error(err);\n    });\n  }\n  deleteTodo(id) {\n    this.todoService.deleteTodo(id).subscribe(res => {\n      if (res) {\n        this.getAllToDos();\n      }\n    }, err => {\n      console.error(err);\n    });\n  }\n  uploadCSV(event) {\n    const file = event.target.files[0];\n    // Papa.parse(file, {\n    //   complete: (result) => {\n    //     const todos: Todo[] = result.data.map((item: any, index: number) => ({\n    //       id: index,\n    //       title: item[0],\n    //       status: item[1]\n    //     }));\n    //     this.todoService.setTodosFromCSV(todos);\n    //   }\n    // });\n  }\n\n  downloadCSV() {\n    this.todoService.getTodos().subscribe(res => {\n      if (res) {\n        // this.getAllToDos();\n        // console.log(res);\n        const timestamp = new Date();\n        const todayDate = `${timestamp.getDate()}${timestamp.getMonth() + 1}${timestamp.getFullYear()}(${timestamp.getHours()}${timestamp.getMinutes()}${timestamp.getSeconds()})`;\n        // const link = document.createElement(\"a\");\n        // const url = URL.createObjectURL(res);\n        // link.href = url;\n        const fileName = `ToDoList-${todayDate}`;\n        // link.download = `${fileName}.xlsx`;\n        // link.click();\n        // URL.revokeObjectURL(url);\n        this.exportAsExcelFile(res, fileName);\n        // this.saveAsExcelFile(excelBuffer, excelFileName);\n      }\n    }, err => {\n      console.error(err);\n    });\n    // const blob = new Blob([csv], { type: 'text/csv' });\n    // saveAs(blob, 'todos.csv');\n  }\n\n  saveAsExcelFile(buffer, fileName) {\n    const data = new Blob([buffer], {\n      type: EXCEL_TYPE\n    });\n    FileSaver.saveAs(data, fileName + '_export_' + this.todaysDate + EXCEL_EXTENSION);\n  }\n  exportAsExcelFile(json, excelFileName) {\n    const worksheet = XLSX.utils.json_to_sheet(json);\n    const workbook = {\n      Sheets: {\n        data: worksheet\n      },\n      SheetNames: ['data']\n    };\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    this.saveAsExcelFile(excelBuffer, excelFileName);\n  }\n  static #_ = this.ɵfac = function TodoListComponent_Factory(t) {\n    return new (t || TodoListComponent)(i0.ɵɵdirectiveInject(i1.TodoService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoListComponent,\n    selectors: [[\"app-todo-list\"]],\n    decls: 22,\n    vars: 5,\n    consts: [[\"placeholder\", \"New Todo\", 1, \"display\", 3, \"ngModel\", \"ngModelChange\"], [1, \"display\", 3, \"click\"], [\"type\", \"file\", 1, \"display\", 3, \"change\"], [2, \"float\", \"inline-end\"], [3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"display\", 3, \"change\"], [\"class\", \"display\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"display\"], [1, \"display\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [1, \"display\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function TodoListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Todo List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.newTodoTitle = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_4_listener() {\n          return ctx.addTodo();\n        });\n        i0.ɵɵtext(5, \"Add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 2);\n        i0.ɵɵlistener(\"change\", function TodoListComponent_Template_input_change_6_listener($event) {\n          return ctx.uploadCSV($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_7_listener() {\n          return ctx.downloadCSV();\n        });\n        i0.ɵɵtext(8, \"Download CSV\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 3)(10, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_10_listener() {\n          return ctx.getAllToDos();\n        });\n        i0.ɵɵtext(11, \"Clear\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"h3\");\n        i0.ɵɵtext(13, \"Status Filter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"select\", 4);\n        i0.ɵɵlistener(\"change\", function TodoListComponent_Template_select_change_14_listener($event) {\n          return ctx.statusFilter($event);\n        });\n        i0.ɵɵtemplate(15, TodoListComponent_option_15_Template, 2, 2, \"option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"h3\");\n        i0.ɵɵtext(17, \"Id Filter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"input\", 6);\n        i0.ɵɵlistener(\"change\", function TodoListComponent_Template_input_change_18_listener($event) {\n          return ctx.idFilter($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"ul\");\n        i0.ɵɵtemplate(20, TodoListComponent_li_20_Template, 9, 5, \"li\", 7);\n        i0.ɵɵpipe(21, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.newTodoTitle);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngForOf\", ctx.statusList);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(21, 3, ctx.todos));\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel, i2.AsyncPipe],\n    styles: [\".display[_ngcontent-%COMP%] {\\r\\n  margin: 15px;\\r\\n  padding: 5px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFza3MtbGlzdC90YXNrLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7RUFDWixZQUFZO0FBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyIuZGlzcGxheSB7XHJcbiAgbWFyZ2luOiAxNXB4O1xyXG4gIHBhZGRpbmc6IDVweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["map","TaskStatus","TaskStatusList","FileSaver","XLSX","i0","TodoListComponent","constructor","todoService","ngOnInit","getAllToDos","todos","getTodos","pipe","res","console","log","taskList","statusFilter","event","target","value","statusFilterTodos","idFilter","getIdFilterTodo","addTodo","newTodo","title","newTodoTitle","status","pending","description","subscribe","err","error","updateTodo","todo","taskId","deleteTodo","id","uploadCSV","file","files","downloadCSV","timestamp","Date","todayDate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","fileName","exportAsExcelFile","saveAsExcelFile","buffer","data","Blob","type","EXCEL_TYPE","saveAs","todaysDate","EXCEL_EXTENSION","json","excelFileName","worksheet","utils","json_to_sheet","workbook","Sheets","SheetNames","excelBuffer","write","bookType","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Test\\todo-list\\UI\\src\\app\\tasks-list\\task-list.component.ts","D:\\Test\\todo-list\\UI\\src\\app\\tasks-list\\task-list.component.html"],"sourcesContent":["// src/app/todo-list/todo-list.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { TodoService, Todo } from '../_service/todo.service';\r\nimport { Observable, map, pipe, subscribeOn } from 'rxjs';\r\nimport { TaskStatus, TaskStatusList } from '../utils/general.config';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\n@Component({\r\n  selector: 'app-todo-list',\r\n  templateUrl: './task-list.component.html',\r\n  styleUrls: ['./task-list.component.css']\r\n})\r\nexport class TodoListComponent implements OnInit {\r\n  todos: Observable<Todo[]> | undefined;\r\n  newTodoTitle = '';\r\n\r\n  statusList: string[] = TaskStatusList;\r\n  StatusFilter: string = \"\";\r\n\r\n  constructor(private todoService: TodoService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getAllToDos();\r\n  }\r\n\r\n  getAllToDos() {\r\n    this.todos = this.todoService.getTodos().pipe(\r\n      map((res: any) => {\r\n        if(res) {\r\n          console.log(res);\r\n          return res.taskList;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  statusFilter(event: any) {\r\n    console.log(event.target.value);\r\n\r\n    this.todos = this.todoService.statusFilterTodos(event.target.value).pipe(\r\n      map((res: any) => {\r\n        if(res) {\r\n          console.log(res);\r\n          return res.taskList;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  idFilter(event: any) {\r\n    console.log(event.target.value);\r\n\r\n    this.todos = this.todoService.getIdFilterTodo(event.target.value).pipe(\r\n      map((res: any) => {\r\n        if(res) {\r\n          console.log(res);\r\n          return res;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  addTodo() {\r\n    const newTodo = {\r\n      title: this.newTodoTitle,\r\n      status: TaskStatus.pending,\r\n      description: \"\"\r\n    };\r\n    this.todoService.addTodo(newTodo).subscribe(\r\n      (res: any) => {\r\n        if(res) {\r\n          this.newTodoTitle = '';\r\n          this.getAllToDos();\r\n        }\r\n      },\r\n      (err: any) => {\r\n        console.error(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  updateTodo(todo: Todo) {\r\n    this.todoService.updateTodo(todo.taskId, todo).subscribe(\r\n      (res: any) => {\r\n        if(res) {\r\n          this.getAllToDos();\r\n        }\r\n      },\r\n      (err: any) => {\r\n        console.error(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteTodo(id: number) {\r\n    this.todoService.deleteTodo(id).subscribe(\r\n      (res: any) => {\r\n        if(res) {\r\n          this.getAllToDos();\r\n        }\r\n      },\r\n      (err: any) => {\r\n        console.error(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  uploadCSV(event: any) {\r\n    const file = event.target.files[0];\r\n    // Papa.parse(file, {\r\n    //   complete: (result) => {\r\n    //     const todos: Todo[] = result.data.map((item: any, index: number) => ({\r\n    //       id: index,\r\n    //       title: item[0],\r\n    //       status: item[1]\r\n    //     }));\r\n    //     this.todoService.setTodosFromCSV(todos);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  downloadCSV() {\r\n    this.todoService.getTodos().subscribe(\r\n      (res: any) => {\r\n        if(res) {\r\n          // this.getAllToDos();\r\n          // console.log(res);\r\n\r\n          const timestamp = new Date();\r\n          const todayDate = `${timestamp.getDate()}${timestamp.getMonth() + 1}${timestamp.getFullYear()}(${timestamp.getHours()}${timestamp.getMinutes()}${timestamp.getSeconds()})`;\r\n\r\n          // const link = document.createElement(\"a\");\r\n          // const url = URL.createObjectURL(res);\r\n          // link.href = url;\r\n          const fileName = `ToDoList-${todayDate}`;\r\n          // link.download = `${fileName}.xlsx`;\r\n          // link.click();\r\n          // URL.revokeObjectURL(url);\r\n\r\n            this.exportAsExcelFile(res, fileName);\r\n\r\n          // this.saveAsExcelFile(excelBuffer, excelFileName);\r\n\r\n        }\r\n      },\r\n      (err: any) => {\r\n        console.error(err);\r\n      }\r\n    );\r\n\r\n    // const blob = new Blob([csv], { type: 'text/csv' });\r\n    // saveAs(blob, 'todos.csv');\r\n  }\r\n\r\n  private saveAsExcelFile(buffer: any, fileName: string): void {\r\n    const data: Blob = new Blob([buffer], {\r\n      type: EXCEL_TYPE,\r\n    });\r\n    FileSaver.saveAs(\r\n      data,\r\n      fileName + '_export_' + this.todaysDate + EXCEL_EXTENSION\r\n    );\r\n  }\r\n\r\n  public exportAsExcelFile(json: any[], excelFileName: string): void {\r\n    const worksheet: XLSX.WorkSheet =XLSX.utils.json_to_sheet(json);\r\n    const workbook: XLSX.WorkBook = {\r\n      Sheets: { data: worksheet },\r\n      SheetNames: ['data'],\r\n    };\r\n    const excelBuffer: any = XLSX.write(workbook, {\r\n      bookType: 'xlsx',\r\n      type: 'array',\r\n    });\r\n    this.saveAsExcelFile(excelBuffer, excelFileName);\r\n  }\r\n\r\n\r\n}\r\n","<!-- src/app/todo-list/todo-list.component.html -->\r\n<div>\r\n  <h1>Todo List</h1>\r\n  <input [(ngModel)]=\"newTodoTitle\" placeholder=\"New Todo\" class=\"display\">\r\n  <button (click)=\"addTodo()\" class=\"display\">Add</button>\r\n  <input type=\"file\" (change)=\"uploadCSV($event)\" class=\"display\">\r\n  <button (click)=\"downloadCSV()\" class=\"display\">Download CSV</button>\r\n\r\n  <div style=\"float: inline-end;\">\r\n    <button (click)=\"getAllToDos();\" class=\"display\">Clear</button>\r\n\r\n    <h3>Status Filter</h3>\r\n    <select (change)=\"statusFilter($event)\">\r\n      <option *ngFor=\"let s of statusList\" [value]=\"s\"> {{ s }} </option>\r\n    </select>\r\n\r\n    <h3>Id Filter</h3>\r\n    <input class=\"display\" (change)=\"idFilter($event)\">\r\n  </div>\r\n\r\n  <ul>\r\n    <li *ngFor=\"let todo of todos | async\" class=\"display\">\r\n      <input [(ngModel)]=\"todo.taskId\" [disabled]=\"true\" class=\"display\">\r\n      <input [(ngModel)]=\"todo.title\" class=\"display\">\r\n      <select [(ngModel)]=\"todo.status\" class=\"display\">\r\n        <option *ngFor=\"let s of statusList\" [value]=\"s\"> {{ s }} </option>\r\n      </select>\r\n      <button (click)=\"updateTodo(todo)\" class=\"display\">Update</button>\r\n      <button (click)=\"deleteTodo(todo.taskId)\" class=\"display\">Delete</button>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}