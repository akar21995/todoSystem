{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_service/todo.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TodoListComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"input\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_li_10_Template_input_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const todo_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(todo_r1.title = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"select\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_li_10_Template_select_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const todo_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(todo_r1.status = $event);\n    });\n    i0.ɵɵelementStart(3, \"option\", 5);\n    i0.ɵɵtext(4, \"Pending\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"option\", 6);\n    i0.ɵɵtext(6, \"Completed\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_li_10_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const todo_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateTodo(todo_r1));\n    });\n    i0.ɵɵtext(8, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_li_10_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const todo_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deleteTodo(todo_r1.id));\n    });\n    i0.ɵɵtext(10, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todo_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", todo_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", todo_r1.status);\n  }\n}\n// import { saveAs } from 'file-saver';\n// import * as Papa from 'papaparse';\nexport class TodoListComponent {\n  constructor(todoService) {\n    this.todoService = todoService;\n    this.newTodoTitle = '';\n  }\n  ngOnInit() {\n    this.todos = this.todoService.getTodos();\n  }\n  addTodo() {\n    const newTodo = {\n      id: Date.now(),\n      title: this.newTodoTitle,\n      status: 'pending'\n    };\n    this.todoService.addTodo(newTodo);\n    this.newTodoTitle = '';\n  }\n  updateTodo(todo) {\n    this.todoService.updateTodo(todo);\n  }\n  deleteTodo(id) {\n    this.todoService.deleteTodo(id);\n  }\n  uploadCSV(event) {\n    const file = event.target.files[0];\n    // Papa.parse(file, {\n    //   complete: (result) => {\n    //     const todos: Todo[] = result.data.map((item: any, index: number) => ({\n    //       id: index,\n    //       title: item[0],\n    //       status: item[1]\n    //     }));\n    //     this.todoService.setTodosFromCSV(todos);\n    //   }\n    // });\n  }\n\n  downloadCSV() {\n    // const todos = this.todoService.getTodosAsCSV();\n    // const csv = Papa.unparse(todos);\n    // const blob = new Blob([csv], { type: 'text/csv' });\n    // saveAs(blob, 'todos.csv');\n  }\n  static #_ = this.ɵfac = function TodoListComponent_Factory(t) {\n    return new (t || TodoListComponent)(i0.ɵɵdirectiveInject(i1.TodoService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoListComponent,\n    selectors: [[\"app-todo-list\"]],\n    decls: 12,\n    vars: 4,\n    consts: [[\"placeholder\", \"New Todo\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"type\", \"file\", 3, \"change\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngModel\", \"ngModelChange\"], [\"value\", \"pending\"], [\"value\", \"completed\"]],\n    template: function TodoListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Todo List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.newTodoTitle = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_4_listener() {\n          return ctx.addTodo();\n        });\n        i0.ɵɵtext(5, \"Add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 2);\n        i0.ɵɵlistener(\"change\", function TodoListComponent_Template_input_change_6_listener($event) {\n          return ctx.uploadCSV($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_7_listener() {\n          return ctx.downloadCSV();\n        });\n        i0.ɵɵtext(8, \"Download CSV\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ul\");\n        i0.ɵɵtemplate(10, TodoListComponent_li_10_Template, 11, 2, \"li\", 3);\n        i0.ɵɵpipe(11, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.newTodoTitle);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(11, 2, ctx.todos));\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel, i2.AsyncPipe],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":";;;;;;;IASIA,0BAAuC;IAC9BA;MAAA;MAAA;MAAA,OAAaA,sCACtB;IAAA,EADiC;IAA/BA,iBAAgC;IAChCA,iCAAkC;IAA1BA;MAAA;MAAA;MAAA,OAAaA,uCACvB;IAAA,EADmC;IAC/BA,iCAAwB;IAAAA,uBAAO;IAAAA,iBAAS;IACxCA,iCAA0B;IAAAA,yBAAS;IAAAA,iBAAS;IAE9CA,iCAAmC;IAA3BA;MAAA;MAAA;MAAA;MAAA,OAASA,yCAAgB;IAAA,EAAC;IAACA,sBAAM;IAAAA,iBAAS;IAClDA,iCAAsC;IAA9BA;MAAA;MAAA;MAAA;MAAA,OAASA,4CAAmB;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;;;;IAN9CA,eAAwB;IAAxBA,uCAAwB;IACvBA,eAAyB;IAAzBA,wCAAyB;;;ACPvC;AACA;AAMA,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAF/B,iBAAY,GAAG,EAAE;EAE8B;EAE/CC,QAAQ;IACN,IAAI,CAACC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;EAC1C;EAEAC,OAAO;IACL,MAAMC,OAAO,GAAS;MACpBC,EAAE,EAAEC,IAAI,CAACC,GAAG,EAAE;MACdC,KAAK,EAAE,IAAI,CAACC,YAAY;MACxBC,MAAM,EAAE;KACT;IACD,IAAI,CAACX,WAAW,CAACI,OAAO,CAACC,OAAO,CAAC;IACjC,IAAI,CAACK,YAAY,GAAG,EAAE;EACxB;EAEAE,UAAU,CAACC,IAAU;IACnB,IAAI,CAACb,WAAW,CAACY,UAAU,CAACC,IAAI,CAAC;EACnC;EAEAC,UAAU,CAACR,EAAU;IACnB,IAAI,CAACN,WAAW,CAACc,UAAU,CAACR,EAAE,CAAC;EACjC;EAEAS,SAAS,CAACC,KAAU;IAClB,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEAC,WAAW;IACT;IACA;IACA;IACA;EAAA;EACD;qBA/CUtB,iBAAiB;EAAA;EAAA;UAAjBA,iBAAiB;IAAAuB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDV9B5B,2BAAK;QACCA,yBAAS;QAAAA,iBAAK;QAClBA,gCAAyD;QAAlDA;UAAA;QAAA,EAA0B;QAAjCA,iBAAyD;QACzDA,iCAA4B;QAApBA;UAAA,OAAS6B,aAAS;QAAA,EAAC;QAAC7B,mBAAG;QAAAA,iBAAS;QACxCA,gCAAgD;QAA7BA;UAAA,OAAU6B,qBAAiB;QAAA,EAAC;QAA/C7B,iBAAgD;QAChDA,iCAAgC;QAAxBA;UAAA,OAAS6B,iBAAa;QAAA,EAAC;QAAC7B,4BAAY;QAAAA,iBAAS;QAErDA,0BAAI;QACFA,mEAQK;;QACPA,iBAAK;;;QAfEA,eAA0B;QAA1BA,0CAA0B;QAMVA,eAAgB;QAAhBA,0DAAgB","names":["i0","TodoListComponent","constructor","todoService","ngOnInit","todos","getTodos","addTodo","newTodo","id","Date","now","title","newTodoTitle","status","updateTodo","todo","deleteTodo","uploadCSV","event","file","target","files","downloadCSV","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Test\\todo-list\\UI\\src\\app\\tasks-list\\task-list.component.html","D:\\Test\\todo-list\\UI\\src\\app\\tasks-list\\task-list.component.ts"],"sourcesContent":["<!-- src/app/todo-list/todo-list.component.html -->\r\n<div>\r\n  <h1>Todo List</h1>\r\n  <input [(ngModel)]=\"newTodoTitle\" placeholder=\"New Todo\">\r\n  <button (click)=\"addTodo()\">Add</button>\r\n  <input type=\"file\" (change)=\"uploadCSV($event)\">\r\n  <button (click)=\"downloadCSV()\">Download CSV</button>\r\n\r\n  <ul>\r\n    <li *ngFor=\"let todo of todos | async\">\r\n      <input [(ngModel)]=\"todo.title\">\r\n      <select [(ngModel)]=\"todo.status\">\r\n        <option value=\"pending\">Pending</option>\r\n        <option value=\"completed\">Completed</option>\r\n      </select>\r\n      <button (click)=\"updateTodo(todo)\">Update</button>\r\n      <button (click)=\"deleteTodo(todo.id)\">Delete</button>\r\n    </li>\r\n  </ul>\r\n</div>\r\n","// src/app/todo-list/todo-list.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { TodoService, Todo } from '../_service/todo.service';\r\nimport { Observable } from 'rxjs';\r\n// import { saveAs } from 'file-saver';\r\n// import * as Papa from 'papaparse';\r\n\r\n@Component({\r\n  selector: 'app-todo-list',\r\n  templateUrl: './task-list.component.html'\r\n})\r\nexport class TodoListComponent implements OnInit {\r\n  todos: Observable<Todo[]>;\r\n  newTodoTitle = '';\r\n\r\n  constructor(private todoService: TodoService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.todos = this.todoService.getTodos();\r\n  }\r\n\r\n  addTodo() {\r\n    const newTodo: Todo = {\r\n      id: Date.now(),\r\n      title: this.newTodoTitle,\r\n      status: 'pending'\r\n    };\r\n    this.todoService.addTodo(newTodo);\r\n    this.newTodoTitle = '';\r\n  }\r\n\r\n  updateTodo(todo: Todo) {\r\n    this.todoService.updateTodo(todo);\r\n  }\r\n\r\n  deleteTodo(id: number) {\r\n    this.todoService.deleteTodo(id);\r\n  }\r\n\r\n  uploadCSV(event: any) {\r\n    const file = event.target.files[0];\r\n    // Papa.parse(file, {\r\n    //   complete: (result) => {\r\n    //     const todos: Todo[] = result.data.map((item: any, index: number) => ({\r\n    //       id: index,\r\n    //       title: item[0],\r\n    //       status: item[1]\r\n    //     }));\r\n    //     this.todoService.setTodosFromCSV(todos);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  downloadCSV() {\r\n    // const todos = this.todoService.getTodosAsCSV();\r\n    // const csv = Papa.unparse(todos);\r\n    // const blob = new Blob([csv], { type: 'text/csv' });\r\n    // saveAs(blob, 'todos.csv');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}