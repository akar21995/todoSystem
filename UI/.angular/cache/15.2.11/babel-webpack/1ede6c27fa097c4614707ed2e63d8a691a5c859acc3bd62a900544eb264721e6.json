{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TodoService {\n  constructor(http) {\n    this.http = http;\n    this.todos = [];\n    this.todosSubject = new BehaviorSubject(this.todos);\n    this.apiUrl = \"http://localhost:3000\";\n  }\n  getTodos() {\n    // return this.todosSubject.asObservable();\n    return this.http.get(`${this.apiUrl}/private/api/task/`);\n  }\n  addTodo(todo) {\n    this.todos.push(todo);\n    this.todosSubject.next(this.todos);\n  }\n  updateTodo(updatedTodo) {\n    const index = this.todos.findIndex(todo => todo.id === updatedTodo.id);\n    if (index !== -1) {\n      this.todos[index] = updatedTodo;\n      this.todosSubject.next(this.todos);\n    }\n  }\n  deleteTodo(id) {\n    this.todos = this.todos.filter(todo => todo.id !== id);\n    this.todosSubject.next(this.todos);\n  }\n  setTodosFromCSV(todos) {\n    this.todos = todos;\n    this.todosSubject.next(this.todos);\n  }\n  getTodosAsCSV() {\n    return this.todos;\n  }\n  static #_ = this.ɵfac = function TodoService_Factory(t) {\n    return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoService,\n    factory: TodoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAQ,MAAM;;;AActC,OAAM,MAAOC,WAAW;EAMtBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANN,UAAK,GAAW,EAAE;IAClB,iBAAY,GAAG,IAAIH,eAAe,CAAS,IAAI,CAACI,KAAK,CAAC;IAEtD,WAAM,GAAG,uBAAuB;EAIrC;EAEHC,QAAQ;IACN;IACA,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,oBAAoB,CAAC;EAC1D;EAEAC,OAAO,CAACC,IAAU;IAChB,IAAI,CAACL,KAAK,CAACM,IAAI,CAACD,IAAI,CAAC;IACrB,IAAI,CAACE,YAAY,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAAC;EACpC;EAEAS,UAAU,CAACC,WAAiB;IAC1B,MAAMC,KAAK,GAAG,IAAI,CAACX,KAAK,CAACY,SAAS,CAACP,IAAI,IAAIA,IAAI,CAACQ,EAAE,KAAKH,WAAW,CAACG,EAAE,CAAC;IACtE,IAAIF,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACX,KAAK,CAACW,KAAK,CAAC,GAAGD,WAAW;MAC/B,IAAI,CAACH,YAAY,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAAC;;EAEtC;EAEAc,UAAU,CAACD,EAAU;IACnB,IAAI,CAACb,KAAK,GAAG,IAAI,CAACA,KAAK,CAACe,MAAM,CAACV,IAAI,IAAIA,IAAI,CAACQ,EAAE,KAAKA,EAAE,CAAC;IACtD,IAAI,CAACN,YAAY,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAAC;EACpC;EAEAgB,eAAe,CAAChB,KAAa;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACO,YAAY,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAAC;EACpC;EAEAiB,aAAa;IACX,OAAO,IAAI,CAACjB,KAAK;EACnB;EAAC;qBAxCUH,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAqB,SAAXrB,WAAW;IAAAsB,YAFV;EAAM","names":["BehaviorSubject","TodoService","constructor","http","todos","getTodos","get","apiUrl","addTodo","todo","push","todosSubject","next","updateTodo","updatedTodo","index","findIndex","id","deleteTodo","filter","setTodosFromCSV","getTodosAsCSV","factory","providedIn"],"sourceRoot":"","sources":["D:\\Test\\todo-list\\UI\\src\\app\\_service\\todo.service.ts"],"sourcesContent":["// src/app/todo.service.ts\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface Todo {\r\n  taskId: number;\r\n  title: string;\r\n  description: string;\r\n  status: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoService {\r\n  private todos: Todo[] = [];\r\n  private todosSubject = new BehaviorSubject<Todo[]>(this.todos);\r\n\r\n  private apiUrl = \"http://localhost:3000\";\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  getTodos() {\r\n    // return this.todosSubject.asObservable();\r\n    return this.http.get(`${this.apiUrl}/private/api/task/`);\r\n  }\r\n\r\n  addTodo(todo: Todo) {\r\n    this.todos.push(todo);\r\n    this.todosSubject.next(this.todos);\r\n  }\r\n\r\n  updateTodo(updatedTodo: Todo) {\r\n    const index = this.todos.findIndex(todo => todo.id === updatedTodo.id);\r\n    if (index !== -1) {\r\n      this.todos[index] = updatedTodo;\r\n      this.todosSubject.next(this.todos);\r\n    }\r\n  }\r\n\r\n  deleteTodo(id: number) {\r\n    this.todos = this.todos.filter(todo => todo.id !== id);\r\n    this.todosSubject.next(this.todos);\r\n  }\r\n\r\n  setTodosFromCSV(todos: Todo[]) {\r\n    this.todos = todos;\r\n    this.todosSubject.next(this.todos);\r\n  }\r\n\r\n  getTodosAsCSV() {\r\n    return this.todos;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}